diff --git a/volatility3/framework/automagic/linux.py b/volatility3/framework/automagic/linux.py
index 2eebcc2d..c444fe34 100644
--- a/volatility3/framework/automagic/linux.py
+++ b/volatility3/framework/automagic/linux.py
@@ -156,6 +156,18 @@ class LinuxIntelStacker(interfaces.automagic.StackerLayerInterface):
                 and init_task.state.cast("unsigned int") != 0
             ):
                 continue
+            elif (
+                init_task.active_mm.cast("long unsigned int")
+                == module.get_symbol("init_mm").address
+                and init_task.tasks.next.cast("long unsigned int")
+                == init_task.tasks.prev.cast("long unsigned int")
+            ):
+                # The idle task steals `mm` from previously running task, i.e.,
+                # `init_mm` is only used as long as no CPU has ever been idle.
+                # This catches cases where we found a fragment of the
+                # unrelocated ELF file instead of the running kernel.
+                vollog.error(f"Skipping Match!!!")
+                continue
 
             # This we get for free
             aslr_shift = (
diff --git a/volatility3/framework/interfaces/symbols.py b/volatility3/framework/interfaces/symbols.py
index b645f5cd..03ddd19f 100644
--- a/volatility3/framework/interfaces/symbols.py
+++ b/volatility3/framework/interfaces/symbols.py
@@ -59,6 +59,10 @@ class SymbolInterface:
     @property
     def type(self) -> Optional[objects.Template]:
         """Returns the type that the symbol represents."""
+        if self._type is not None:
+            #import traceback
+            #print(traceback.print_stack())
+            print(f"GREPME {self.name} {self._type.vol.type_name.split('!')[1]}")
         return self._type
 
     @property
diff --git a/volatility3/framework/objects/__init__.py b/volatility3/framework/objects/__init__.py
index 3b174571..5c0f6025 100644
--- a/volatility3/framework/objects/__init__.py
+++ b/volatility3/framework/objects/__init__.py
@@ -593,12 +593,7 @@ class Enumeration(interfaces.objects.ObjectInterface, int):
         inverse_choices: Dict[int, str] = {}
         for k, v in choices.items():
             if v in inverse_choices:
-                # Technically this shouldn't be a problem, but since we inverse cache
-                # and can't map one value to two possibilities we throw an exception during build
-                # We can remove/work around this if it proves a common issue
-                raise ValueError(
-                    f"Enumeration value {v} duplicated as {k} and {inverse_choices[v]}"
-                )
+                continue
             inverse_choices[v] = k
         return inverse_choices
 
diff --git a/volatility3/framework/symbols/linux/__init__.py b/volatility3/framework/symbols/linux/__init__.py
index 894be0dc..eb437216 100644
--- a/volatility3/framework/symbols/linux/__init__.py
+++ b/volatility3/framework/symbols/linux/__init__.py
@@ -29,7 +29,6 @@ class LinuxKernelIntermedSymbols(intermed.IntermediateSymbolTable):
         self.set_type_class("files_struct", extensions.files_struct)
         self.set_type_class("kobject", extensions.kobject)
         self.set_type_class("cred", extensions.cred)
-        self.set_type_class("kernel_cap_struct", extensions.kernel_cap_struct)
         # Might not exist in the current symbols
         self.optional_set_type_class("module", extensions.module)
         self.optional_set_type_class("bpf_prog", extensions.bpf_prog)
@@ -48,6 +47,7 @@ class LinuxKernelIntermedSymbols(intermed.IntermediateSymbolTable):
         self.set_type_class("sock", extensions.sock)
         self.set_type_class("inet_sock", extensions.inet_sock)
         self.set_type_class("unix_sock", extensions.unix_sock)
+        self.set_type_class('net_device', extensions.net_device)
         # Might not exist in older kernels or the current symbols
         self.optional_set_type_class("netlink_sock", extensions.netlink_sock)
         self.optional_set_type_class("vsock_sock", extensions.vsock_sock)
@@ -265,6 +265,9 @@ class LinuxUtilities(interfaces.configuration.VersionableInterface):
 
         for fd_num, filp in enumerate(fds):
             if filp != 0:
+                # workaround for #922
+                filp = filp.dereference().cast(file_type)
+
                 full_path = LinuxUtilities.path_for_file(context, task, filp)
 
                 yield fd_num, filp, full_path
diff --git a/volatility3/framework/symbols/linux/extensions/__init__.py b/volatility3/framework/symbols/linux/extensions/__init__.py
index d8a2867c..c9f22ee6 100644
--- a/volatility3/framework/symbols/linux/extensions/__init__.py
+++ b/volatility3/framework/symbols/linux/extensions/__init__.py
@@ -1666,3 +1666,13 @@ class kernel_cap_t(kernel_cap_struct):
             )
 
         return cap_value & self.get_kernel_cap_full()
+
+
+class net_device(objects.StructType):
+    def get_ip_ptr(self):
+        # in kernel < 3.0.0, ip_ptr is a void pointer, so we need to cast it to in_device
+        return self.ip_ptr.dereference().cast('in_device')
+
+    def get_ip6_ptr(self):
+        # in kernel < 3.0.0, ip6_ptr is a void pointer, so we need to cast it to inet6_dev
+        return self.ip6_ptr.dereference().cast('inet6_dev')
diff --git a/volatility3/schemas/schema-6.2.0.json b/volatility3/schemas/schema-6.2.0.json
index 1f388005..65a6f5c6 100644
--- a/volatility3/schemas/schema-6.2.0.json
+++ b/volatility3/schemas/schema-6.2.0.json
@@ -105,7 +105,7 @@
       "properties": {
         "kind": {
           "type": "string",
-          "pattern": "^(dwarf|symtab|system-map)$"
+          "pattern": "^(btf|symdb|dwarf|symtab|system-map)$"
         },
         "name": {
           "type": "string"
